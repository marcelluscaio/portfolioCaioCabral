---
import projectsData from "../../utils/returnProjects.ts";
import { generateChildHeading } from "../../utils/generateChildHeading.ts";
import { generateParagraphs } from "../../utils/generateParagraphs.ts";
import { normalizeString } from "../../utils/normalizeString";

import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import TechnologiesList from "../../components/Elements/TechnologiesList.astro";
import Button from "../../components/Elements/Button.astro";

export async function getStaticPaths() {
	return projectsData.map((project) => ({
		params: { slug: project.slug },
		props: { project },
	}));
}

const { project } = Astro.props;
const {
	title,
	summary,
	purpose,
	technologyChoice,
	highlights,
	challenges,
	lessonsLearned,
	image1,
	altImage1,
	image2,
	altImage2,
	githubUrl,
	projectUrl,
	technologies,
	date,
} = project;

const Heading = "h1";
const childHeading = generateChildHeading(Heading);

const texts = [
	summary,
	purpose,
	technologyChoice,
	highlights,
	challenges,
	lessonsLearned,
];
const [
	summaryArray,
	purposeArray,
	technologyChoiceArray,
	highlightsArray,
	challengesArray,
	lessonsArray,
] = texts.map((text) => generateParagraphs(text));
---

<Layout title="My projects">
	<div class="color">
		<Heading class="title--medium heading">
			{title}
		</Heading>
		<TechnologiesList
			technologies={technologies}
			headingLevel={childHeading}
		/>
		<div class="flex">
			<Image
				src={image1}
				alt={altImage1}
				transition:name={`project-${normalizeString(title)}`}
			/>
			<div class="text-container">
				{
					summaryArray.map((text: string) => (
						<p class="regular-text--medium">{text}</p>
					))
				}
				{
					purposeArray.map((text: string) => (
						<p class="regular-text--medium">{text}</p>
					))
				}
			</div>
		</div>
		<div class="flex">
			<div class="text-container">
				{
					technologyChoiceArray.map((text: string) => {
						return <p class="regular-text--medium">{text}</p>;
					})
				}
			</div>
			<div class="text-container">
				{
					highlightsArray.map((text: string) => {
						return <p class="regular-text--medium">{text}</p>;
					})
				}
			</div>
		</div>
		<div class="flex">
			<Image
				src={image2}
				alt={altImage2}
			/>
			<div class="text-container">
				{
					challengesArray.map((text: string) => {
						return <p class="regular-text--medium">{text}</p>;
					})
				}
				{
					lessonsArray.map((text: string) => {
						return <p class="regular-text--medium">{text}</p>;
					})
				}
			</div>
		</div>
		<div class="buttons-container">
			<Button
				href={projectUrl}
				backgroundColor="white"
				color="purple"
			>
				Visit project
			</Button>
			<Button
				href={githubUrl}
				backgroundColor="white"
				color="purple"
			>
				Check code
			</Button>
		</div>
	</div>
</Layout>

<style lang="scss">
	@use "../../styles/style.scss" as *;
	.color {
		color: $white;
	}

	.heading {
		margin-bottom: 0.5em;

		text-align: center;
	}

	.flex {
		display: flex;
		flex-direction: column;
		gap: var(--spacing-1);

		margin-bottom: var(--spacing-1);
	}

	:nth-child(1 of .flex) {
		flex-direction: column-reverse;

		margin-top: var(--spacing-3);
	}

	img {
		max-height: min(80vh, 38rem);
		object-fit: contain;

		border-radius: calc(0.25vw + 0.25rem);
	}

	p + p {
		margin-top: var(--spacing-1);
	}

	@media (min-width: 70em) {
		.flex.flex {
			display: flex;
			flex-direction: row;
			align-items: flex-start;
			justify-content: space-between;
			--gap: var(--spacing-4);
			gap: var(--gap);

			margin-bottom: calc(var(--spacing-5) * 2);

			&:nth-child(1 of .flex) {
				flex-direction: row-reverse;
			}

			&:nth-child(3 of .flex) {
				margin-bottom: var(--spacing-1);
			}

			& > * {
				width: calc(50% - (var(--gap) / 2));
				flex-grow: 0;
				flex-shrink: 1;
			}
		}

		.buttons-container {
			display: flex;
			justify-content: center;
			gap: var(--fs-5);
		}
	}
</style>
